;; ##### SETUP FUNCTIONS ####

to load
  set projection "WGS_84_Geographic"
  set parking-dataset gis:load-dataset "GIS_data/parking.geojson"
  set residential-dataset gis:load-dataset "GIS_data/residential.geojson"
  set grass-dataset gis:load-dataset "GIS_data/grass.geojson"
  set houses-dataset gis:load-dataset "GIS_data/houses.geojson"
  set station-dataset gis:load-dataset "GIS_data/Ede-station.geojson"
  gis:set-world-envelope (list 5.6716 5.6860 52.0280 52.0206)
end

to setup-spots
  ;; For each parking space, determine the centroid, convert to x,y coordinates (list with 2 elements),
  ;; and create a turtle in the center of that polygon
  foreach gis:feature-list-of parking-dataset [ this-vector-feature ->
    let center gis:centroid-of this-vector-feature
    let loc gis:location-of center

    if length loc >= 2 [
      create-spots 1 [
        setxy item 0 loc item 1 loc
        set capacity gis:property-value this-vector-feature "capacity"
        ifelse capacity != "" [set capacity read-from-string capacity][die] ;; TODO: Fix spots without capacity
        set shape "square"
        set color red
        set size 0.1
        set label capacity
        set private? false
      ]
    ]
  ]
end

to setup-station
  ask patches [set station? false]
  foreach gis:feature-list-of station-dataset [ this-vector-feature ->
    let center gis:centroid-of this-vector-feature
    let loc gis:location-of center

    if length loc >= 2 [
      ask patch item 0 loc item 1 loc [set pcolor pink set station? true]
    ]
  ]
end

to setup-virtual-locations
  ask patches with [station?] [
    ask patch-at 5 0 [set pcolor blue]    ;; Bike
    ask patch-at 10 0 [set pcolor red]    ;; Car
    ask patch-at 15 0 [set pcolor green]  ;; Shared car
  ]
  
  set virtual-locations table:make
  table:put virtual-locations "public-transport" pink
  table:put virtual-locations "bike" blue
  table:put virtual-locations "car" red
  table:put virtual-locations "shared-car" green
end

;; TODO: Also create virtual spots for residents to travel to when traveling with shared car, etc.

to setup-households
  foreach gis:feature-list-of houses-dataset [ this-vector-feature ->
    let center gis:centroid-of this-vector-feature
    let loc gis:location-of center

    if length loc >= 2 [setup-household loc]
    ]

  ask n-of 10 households [type "Household ages: " ask residents with [household-nr = myself] [type age type ", "] type "child wish: " print child-wish]
end

to setup-household [loc]
  create-households 1 [
    setxy item 0 loc item 1 loc
    set driveway first rnd:weighted-one-of-list [[0 0.8] [1 0.15] [2 0.05]] [[p] -> last p]
    set shape "house"
    set color blue
    set size 0.1
    set distance-spot distance min-one-of spots [distance myself] * patch-distance
    set distance-station distance one-of patches with [station?] * patch-distance

    setup-residents
    
  ]
end

to setup-residents
  ;; Create between 1 and 2 adults with an age within a few years of eachother
  let intial-adults first rnd:weighted-one-of-list [[1 0.1] [2 0.9]] [[p] -> last p]
  let approximate-adults-age 25 + random 41
  hatch-residents intial-adults [
    set parent? true
    set age approximate-adults-age + random 4 - 3
    set color yellow
    set-resident-properties
    setup-cars
    setup-destinations
  ]

  ;; Determine their child wish and the approximate age of their childeren (between 20 and 30 years younger)
  set child-wish first rnd:weighted-one-of-list [[0 0.2] [1 0.35] [2 0.35] [3 0.1]] [[p] -> last p]
  let approximate-child-age approximate-adults-age - 20 - random 11

  ;; For each child, determine if they either A) have already moved out, B) are not born yet or C) are living with them, and adjust the child wish accordingly
  foreach range child-wish [
    let predicted-child-age approximate-child-age + random 6 - 4
    if predicted-child-age > 0 [ ;; if born
      set child-wish child-wish - 1
      if predicted-child-age < (18 + random 8) [ ;; if also still living at home
        hatch-residents 1 [
          set parent? false
          set age predicted-child-age
          set color orange
          set-resident-properties
          setup-cars
          setup-destinations
        ]
      ]
    ]
  ]
end

to set-resident-properties
  set size 0.3
  set heading random 360
  set household-nr myself
  set away? false
  
  ;; Set up normal distributions for the initial individual modality preferences.
  ;; Limitation: normal distributions are not completely acurate in the real world.
  let car-preference random-normal initial-car-preference 0.15
  if car-preference <= 0 [set car-preference 0.01]
  if car-preference > 1 [set car-preference 1]
  
  let bike-preference random-normal initial-bike-preference 0.15
  if bike-preference <= 0 [set bike-preference 0.01]
  if bike-preference > 1 [set bike-preference 1]
  
  let public-transport-preference random-normal initial-public-transport-preference 0.15
  if public-transport-preference <= 0 [set public-transport-preference 0.01]
  if public-transport-preference > 1 [set public-transport-preference 1]
  
  let shared-car-preference random-normal initial-shared-car-preference 0.15
  if shared-car-preference <= 0 [set shared-car-preference 0.01]
  if shared-car-preference > 1 [set shared-car-preference 1]
  
  set modality-preference table:make
  table:put modality-preference "car" car-preference
  table:put modality-preference "bike" bike-preference
  table:put modality-preference "public-transport" public-transport-preference
  table:put modality-preference "shared-car" shared-car-preference
  
  set adoption-speed random-normal 0.5 0.15
  if adoption-speed <= 0 [set adoption-speed 0.01]
  if adoption-speed > 1 [set adoption-speed 1]
  
  set preference-utility-tradeoff random-normal 0.5 0.15   ;; 1 means 100% utility based, 0 means 100% modality preference bases
  if preference-utility-tradeoff < 0 [set preference-utility-tradeoff 0]
  if preference-utility-tradeoff > 1 [set preference-utility-tradeoff 1]
  
  set work-days random-poisson mean-weekly-work-trips
  if work-days > 6 [set work-days 6]  ;; Note that this lowers the actual average a bit
  set other-days random-poisson mean-weekly-other-trips
  if other-days > 7 [set other-days 7]
  
  set value-of-time random-gamma (mean-value-of-time * mean-value-of-time / variance-value-of-time) (1 / (variance-value-of-time / mean-value-of-time))
end

to setup-cars
  ;; If the preferred mode of transport is the car, a resident gets a car
  let gets-car? false ;; initialize variable
  
  let preferred-mode-value max table:values modality-preference 
  if age >= 18 and table:get modality-preference "car" = preferred-mode-value [set gets-car? true]

  ifelse gets-car?
    [set owns-car? true
      hatch-cars 1 [set-car-properties false]
      set car-nr one-of cars with [owner = myself]
    ]
    [set owns-car? false
      set car-nr nobody  
    ]
end

to setup-shared-cars
  create-cars amount-of-shared-cars [
    set-car-properties true
  ]
end 

to set-car-properties [is-shared?]
  set shared? is-shared?
  set size 0.5
  set shape "car"
  
  ifelse shared? [
    set owner nobody
    set color green 
  ] [
    set owner myself
    set lease? random-float 1 < 0.12  ;; CBS
    ifelse lease?
      [set age random 4
       set mileage age * (9000 + random 18000)]
      [set age random 10
       set mileage age * (5000 + random 10000)]
      set in-use? false
  ]  
  park-car
end

to park-car
  ifelse shared? [
    let target-spot one-of spots with [member? [who] of self [1 5 15 18 22 27 31 45]]
    move-to target-spot
      ask target-spot [set occupancy occupancy + 1] 
  ] [
    let target-spot min-one-of spots with [not private? and occupancy < capacity] [distance myself]
    move-to target-spot
      ask target-spot [set occupancy occupancy + 1]
  ]
  
end

to drive-car [target-color]
  ask min-one-of spots [distance myself] [set occupancy occupancy - 1] 
  move-to one-of patches with [pcolor = target-color]
end
;;[owner shared? age yearly-costs km-costs mileage lease? in-use?]

to draw
  gis:set-drawing-color grey
  gis:fill residential-dataset 0
  gis:set-drawing-color green
  gis:fill grass-dataset 0
  gis:set-drawing-color red
  gis:fill parking-dataset 0
  gis:set-drawing-color blue
  gis:fill houses-dataset 0
end

to setup-contacts
  print "Setting up contacts:"
  ;; Setup neighbours
  ask residents [
    let n-neighbours random-poisson average-neighbour-contacts  ;; Note that poisson might not be the ideal distribution
    set neighbours-contacts up-to-n-of n-neighbours residents in-radius 3
    ;; TODO: Maybe consider age
  ]

  ;; Setup contacts for parents with childeren of same age
  ask residents [set parent-contacts nobody]
  ask residents with [parent?] [
    ;; Get ages of own childeren
    let childeren residents with [household-nr = [household-nr] of myself and not parent? and age <= 12]
    let ages sort [age] of childeren

    ask childeren [
      let peers residents with [abs(age - [age] of myself) <= 1] ;; Max one year age difference
      let peer-parents residents with [parent? and member? household-nr [household-nr] of peers]
      let n-peers random-poisson average-parent-contacts-per-child
      if n-peers >= 1 [
        let new-parents-contacts up-to-n-of n-peers peer-parents
        set parent-contacts (turtle-set parent-contacts new-parents-contacts)
      ]
    ]
  ]
  ask n-of 10 residents [type "Neighbours: " type count neighbours-contacts type ", parent contacts: " type parent-contacts type ", total: " print count (turtle-set neighbours-contacts parent-contacts)]
end

to setup-destinations
    set work-destinations n-values 1 [create-destination true]
    set other-destinations n-values 3 [create-destination false]
end

to-report create-destination [work?]
  let trip-distance 0
  let trip-length 0
  ifelse work? [
    set trip-distance random-gamma (mean-distance-work * mean-distance-work / variance-distance-work) (1 / (variance-distance-work / mean-distance-work))
    set trip-length work-trip-length
  ] [
    set trip-distance random-gamma (mean-distance-other * mean-distance-other / variance-distance-other) (1 / (variance-distance-other / mean-distance-other))
    set trip-length other-trip-length
  ]

  let destination-table table:make
  table:put destination-table "distance" trip-distance
  table:put destination-table "car-time" trip-distance / mean-car-speed
  table:put destination-table "bike-time" trip-distance / mean-bike-speed
  table:put destination-table "public-transport-time" trip-distance / mean-public-transport-speed
  table:put destination-table "car-costs" trip-distance * car-costs-per-km
  table:put destination-table "public-transport-costs" trip-distance * public-transport-costs-per-km
  table:put destination-table "shared-car-costs" trip-distance * shared-car-costs-per-km + trip-length * shared-car-costs-per-hour

  table:put destination-table "eff-car-costs" table:get destination-table "car-costs" + table:get destination-table "car-time" * value-of-time
  table:put destination-table "eff-bike-costs" table:get destination-table "bike-time" * value-of-time
  table:put destination-table "eff-public-transport-costs" table:get destination-table "public-transport-costs" + (table:get destination-table "public-transport-time" + 2 * [distance-station] of household-nr / mean-bike-speed) * value-of-time
  table:put destination-table "eff-shared-car-costs" table:get destination-table "shared-car-costs" + table:get destination-table "car-time" * value-of-time
  
  table:put destination-table "last-modality" ""
  table:put destination-table "consecutive-count" 0

  report destination-table
end