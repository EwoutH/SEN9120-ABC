;; ##### DAILY FUNCTIONS ####
to start-trip [work?]
  let destination 0
  ifelse work?
    [set destination one-of work-destinations]
    [set destination one-of other-destinations]

  ;; Check if own car is available
  let available-modalities ["bike" "public-transport"]
  if owns-car? [
    set available-modalities lput "car" available-modalities  
    ;; TODO: Also check household cars
    ;; This is complicated, because first all household members need to check if they need their own car,
    ;; and only after the not used cars can be distributed among other household members (people will generally use their own car first)
  ]
  ;; Check if shared-car is available
  if any? cars with [shared? and not in-use?] [
    set available-modalities lput "shared-car" available-modalities 
  ]  

  ;; Choose modality based on a concious choice or previous choice, if previous choice is available
  let last-modality table:get destination "last-modality"

  let new-choice? not member? last-modality available-modalities or random-float 1 < (1 / max list 1 table:get destination "consecutive-count")
  let modality ""
 

  ;; Create a list with the effective costs for each available modality
  let eff-costs []
  foreach available-modalities [
    [key] -> set eff-costs lput (table:get destination (word "eff-" key "-costs")) eff-costs
  ]

  ;; Update the car and shared-car costs with the walking distance
  if member? "car" available-modalities [
    let walking-costs distance car-nr * patch-distance / walking-speed * value-of-time
    set eff-costs replace-item 2 eff-costs (item 2 eff-costs + walking-costs)
  ]
  if member? "shared-car" available-modalities [
    let walking-costs distance min-one-of cars with [shared? and not in-use?] [distance myself] * patch-distance / walking-speed * value-of-time
    ifelse member? "car" available-modalities   ;; The shared car is the fourth (3) item if a car is also available, otherwise the third (2) item
     [set eff-costs replace-item 3 eff-costs (item 3 eff-costs + walking-costs)]
     [set eff-costs replace-item 2 eff-costs (item 2 eff-costs + walking-costs)]
  ]

  let max-costs max eff-costs
  let min-costs min eff-costs

  ifelse member? "car" available-modalities [
    set min-monthly-costs-car min-monthly-costs-car + min-costs
    let min-costs-without-car min remove-item 2 eff-costs
    set min-monthly-costs min-monthly-costs + min-costs-without-car
  ] [
    set min-monthly-costs min-monthly-costs + min-costs
    let costs-with-car table:get destination "eff-car-costs"
    set min-monthly-costs-car min-monthly-costs-car + min list min-costs costs-with-car  ;; Note walking costs are ignored here, since they can't be calculated without a car location
  ]

  ifelse new-choice? [
    ;; Calculate utility for each modality based on where cars are parked, and normalize to 0 to 1 range (1 is zero costs, 0 is the maximum costs)
    let utility []
    foreach eff-costs [
      [key] -> set utility lput ((max-costs - key + min-costs) / max-costs) utility
    ]

    ;; Calculate preference for each modality based on preference, utility and preference-utility-tradeoff:
    ;;     preference = utility * preference-utility-tradeoff + preference * (1 - preference-utility-tradeoff)
    let i 0
    let preferences table:make
    foreach available-modalities [
      [key] -> table:put preferences key (item i utility * preference-utility-tradeoff + table:get modality-preference key * (1 - preference-utility-tradeoff))
      set i i + 1
    ]
    let max-preference max table:values preferences

    foreach available-modalities [
      [key] -> if table:get preferences key = max-preference [set modality key]
    ]
  ]
  [
    set modality last-modality 
  ]

  ;; Move car
  if modality = "car" [
    ask car-nr [
      set in-use? true
      drive-car table:get virtual-locations modality
    ]
  ]
  
  ;; Update destination table with the last modality
  ifelse modality = table:get destination "last-modality"
    [table:put destination "consecutive-count" table:get destination "consecutive-count" + 1]
    [table:put destination "last-modality" modality
     table:put destination "consecutive-count" 1]

  set away? true
end


to end-trip
  ;; TODO:
  ;; - Add costs to months-costs counter
  ;; - Update preference somehow
  ;; - Save this modality as last used and increase a counter wiht +1 how many times this modality was used
  ;; - Move turtle (and car) back
  if owns-car? [ask car-nr [if in-use? [
    set in-use? false
    park-car
  ]]]
  set away? false
end

;; ##### MONTHLY FUNCTIONS ####

to update-destinations

end

;; Function for selling and buying cars, the chance of selling or buying a car is determined by the ownership of car first, then the function checks if costs can be saved by choosing 
;; an alternative mode of transport, this difference is divided by the total costs and multiplied by a tradeoff. Then the difference in modality preference is added.
to buy-sell-car 
  set total-car-costs min-monthly-costs-car + (fixed-car-costs + parking-permit-costs) / 31 * days-in-month
  set total-costs min-monthly-costs
  let non-car-preference mean remove-item 0 table:values modality-preference 
  
  ifelse owns-car? [
    if total-car-costs > total-costs [
      ;; consider selling car
      let sell-car-chance ((total-car-costs - total-costs) / total-car-costs * preference-utility-tradeoff) + (non-car-preference - table:get modality-preference "car") * (1 - preference-utility-tradeoff)
        if random-float 1 < sell-car-chance [
          set owns-car? false
          ask cars with [owner = myself][
            drive-car table:get virtual-locations "car"
            die
          ]
        ]
    ]
  ] [
    if total-car-costs < total-costs [
      ;; consider buying car
      let buy-car-chance ((total-costs - total-car-costs) / total-costs * preference-utility-tradeoff) + (table:get modality-preference "car" - non-car-preference) * (1 - preference-utility-tradeoff)
        if random-float 1 < buy-car-chance [
          set owns-car? true
          hatch-cars 1 [set-car-properties false]
          set car-nr one-of cars with [owner = myself]
        ]
    ]
  ]
  set min-monthly-costs 0
  set min-monthly-costs-car 0
end 

to update-preferences [contact-preferences]
  let alpha social-adoption-multiplier * adoption-speed
  foreach (table:keys modality-preference) [
    [key] -> table:put modality-preference key (table:get modality-preference key * (1 - alpha) + table:get contact-preferences key * alpha)
  ]
end

;; ##### YEARLY FUNCTIONS ####

to age-resident
  set age age + 1
end

to move-households
  let new-household-locations []
  ask households [
    if random-float 1 < chance-of-household-moving / 100 [
      let loc [list xcor ycor] of self
      set new-household-locations lput loc new-household-locations

      ask residents with [household-nr = myself][
        ask cars with [owner = myself][
          ask spots-here [set occupancy occupancy - 1] ;; TODO: Create function to (re)move cars
          die
        ]
        die
      ]
      die
    ]
  ]
  foreach new-household-locations setup-household
end

to move-out-child
  ask residents with [not parent? and age >= 18] [
    if random-float 1 < chance-of-moving-out / 100 [
      die
    ]
  ]
end

to update-labels
  ask spots [ifelse shared-capacity = 0
    [set label (capacity - occupancy)]
    [set label (word (capacity - occupancy) "-" (shared-capacity - shared-occupancy))]
  ]
end
